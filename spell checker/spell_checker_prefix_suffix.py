# -*- coding: utf-8 -*-
"""spell checker_prefix_suffix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pYL9jSLREzFlmp2WDf6qAcRPhn_FIgc5
"""

# Import the necessary library to use the drive object
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

!pip install python-Levenshtein

import Levenshtein

# Define the function to correct text using prefix and suffix matching
def correct_text_with_prefix_suffix(test_sentence, correct_words, prefix_length=3, suffix_length=3):
    """Corrects the given text using prefix and suffix matching."""
    words = test_sentence.split()
    corrected_words = []
    corrected_items = []  # To store words that were corrected

    for word in words:
        # Find the closest match using prefix and suffix
        possible_matches = [
            correct_word for correct_word in correct_words
            if correct_word[:prefix_length] == word[:prefix_length] or correct_word[-suffix_length:] == word[-suffix_length:]
        ]

        # If no matches are found, use Levenshtein distance to find the closest match
        if not possible_matches:
            closest_word = min(correct_words, key=lambda correct_word: Levenshtein.distance(word, correct_word))
        else:
            # If matches are found, pick the one with the minimum Levenshtein distance
            closest_word = min(possible_matches, key=lambda correct_word: Levenshtein.distance(word, correct_word))

        corrected_words.append(closest_word)

        # If the word was corrected, track the change
        if closest_word != word:
            corrected_items.append((word, closest_word))

    corrected_text = " ".join(corrected_words)
    return corrected_text, corrected_items

# Load the correct dataset
correct_dataset_file = "/content/drive/MyDrive/spell checker/dataset.txt"
with open(correct_dataset_file, 'r', encoding='utf-8') as file:
    correct_sentences = [line.strip() for line in file]
    correct_words = set(word for sentence in correct_sentences for word in sentence.split())

# Define a list of incorrect sentences for testing
wrong_sentences = [
    "மழை பெய்யும் காலத்தில் பசுமையான இயற்கை சூழலில மநிதர்கள் மகிழ்ச்சியுடன் இயற்கையின் அழகை ரசிகின்றனர்.",
    "சூரியன் ஒளி தளர்வதால மாலை நேரத்தில கோபுரங்களின் மேல அழகாக வானவில தோன்றி பரந்த மகிழ்சியை ஏற்படுத்திகிறது.",
    "பனிக்கட்டிகள் உருகி சூழலை ஈரமாக்கிகின்றன.",
    "வானத்தில் ஒளிரும் நட்சத்திரங்கள், பறக்கும் வெளி மேகங்கள், அவற்றின் கீழ அமைதியாக நடக்கும் மநிதர்கள் எல்லாம் மநதை கவர்கின்றன.",
    "கதிரவன் உதிக்கும் காலையில் பறவைகள் குரலுடன் வானத்த தோய்க்கும், இயற்கையின் அழகு ஒவ்வொரு மநதையும் மகிழ்ச்சியுட நிரப்பிகிறது."
]

# Compare and correct sentences
for idx, wrong_sentence in enumerate(wrong_sentences):
    print(f"\n--- Sentence {idx+1} ---")
    print(f"Given Sentence: {wrong_sentence}")

    # Correct the wrong sentence and get the corrected words using prefix and suffix matching
    corrected_sentence, corrected_items = correct_text_with_prefix_suffix(wrong_sentence, correct_words)

    # Print the corrected sentence
    print(f"Corrected Sentence: {corrected_sentence}")

    # Print the words that were corrected
    if corrected_items:
        print("Corrected Words:")
        for original, corrected in corrected_items:
            print(f"  - {original} -> {corrected}")
    else:
        print("No corrections needed.")