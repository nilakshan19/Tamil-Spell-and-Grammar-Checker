# -*- coding: utf-8 -*-
"""rule based grammar checking .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bV6DHvrTYDliNw0VcHRbylk0ID6AkENp
"""

import re
from google.colab import files

# Function to check Subject-Verb Agreement for simple Tamil sentences
def subject_verb_agreement(sentence):
    subject_verb_errors = []

    # Common subject-verb agreement mistakes in Tamil
    subject_verb_patterns = [
        (r"\b(அவன்|அவள்)\s+அல்லை\b", "Incorrect: 'அவன் அல்லை' should be 'அவன் இல்லை'"),
        (r"\b(நான்|நாங்கள்)\s+இல்லை\b", "Incorrect: 'நான் இல்லை' should be 'நான் இல்லை'"),
        (r"\b(நான்)\s+இருக்கின்றேன்\b", "Incorrect: 'நான் இருக்கின்றேன்' should be 'நான் இருக்கின்றேன்'"),  # "இருக்கின்றேன்" is wrong for 'நான்'
    ]

    # Check for subject-verb agreement errors in the sentence
    for pattern, message in subject_verb_patterns:
        if re.search(pattern, sentence, re.IGNORECASE):
            subject_verb_errors.append(message)

    return subject_verb_errors

# Function to check tense consistency based on temporal adverbs
def check_tense(sentence):
    tense_errors = []

    # Tense consistency checks with temporal adverbs (like "நேற்று", "இன்று", "நாளை")
    tense_patterns = [
        (r"\b(நேற்று|கடந்த)\b", r"\b(இருக்கின்றேன்|இருக்கிறார்|இருக்கின்றது)\b", "Past tense mismatch: Should use past tense verbs like 'இிருந்தேன்'"),
        (r"\b(இன்று|இப்போது|போன்ற)\b", r"\b(இருக்கின்றேன்|இருக்கிறார்|இருக்கின்றது)\b", "Present tense mismatch: Should use present tense verbs like 'இருக்கின்றேன்'"),
        (r"\b(நாளை|எடுத்த)\b", r"\b(இருக்கின்றேன்|இருக்கிறார்|இருக்கின்றது)\b", "Future tense mismatch: Should use future tense verbs like 'இருக்கப்போகின்றேன்'"),
    ]

    # Check for tense errors
    for time_adverb, verb_pattern, message in tense_patterns:
        if re.search(time_adverb, sentence, re.IGNORECASE) and re.search(verb_pattern, sentence, re.IGNORECASE):
            tense_errors.append(message)

    return tense_errors

# Function to check punctuation errors like missing periods or commas
def punctuation_errors(sentence):
    errors = []
    if not sentence.endswith(('.', '!', '?')):
        errors.append("Punctuation Error: Sentence should end with a period, exclamation mark, or question mark.")
    return errors

# Function to check grammar and provide feedback
def grammar_checker(sentence):
    errors = []

    # Check for Subject-Verb Agreement errors
    errors.extend(subject_verb_agreement(sentence))

    # Check for tense consistency
    errors.extend(check_tense(sentence))

    # Check for punctuation errors
    errors.extend(punctuation_errors(sentence))

    # If there are errors, return them, otherwise return a success message
    if errors:
        return errors
    else:
        return ["No grammatical errors found!"]

# Function to process text file
def process_file(input_file, output_file):
    # Read input file
    with open(input_file, 'r', encoding='utf-8') as file:
        text = file.read()

    # Split text into sentences (simple sentence split by full stops)
    sentences = text.split('\n')

    # Process each sentence
    corrected_text = []
    for sentence in sentences:
        sentence = sentence.strip()
        if sentence:
            errors = grammar_checker(sentence)
            corrected_text.append(f"Sentence: {sentence}")
            corrected_text.extend([f"Error: {error}" for error in errors])
            corrected_text.append("")  # Blank line for separation

    # Write corrected output to file
    with open(output_file, 'w', encoding='utf-8') as file:
        file.write("\n".join(corrected_text))

    print(f"Corrected file saved as {output_file}")

# Upload input file and process
uploaded = files.upload()

# Check if file is uploaded and then process it
input_file = list(uploaded.keys())[0]
output_file = "corrected_tamil_grammar_output.txt"

# Process the file
process_file(input_file, output_file)

# Download the output file
files.download(output_file)